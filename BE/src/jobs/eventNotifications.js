// src/jobs/eventNotifications.js
const cron = require("node-cron");
const dayjs = require("dayjs");
const Event = require("../models/Event");
const Notification = require("../models/Notification");

// H√†m g·ª≠i th√¥ng b√°o
async function sendNotification({ title, content, eventId }) {
  try {
    await Notification.create({
      title,
      content,
      eventId,
      receiverType: "all",
      sender: "System",
    });
    console.log("üîî Notification:", title);
  } catch (err) {
    console.error("‚ùå Error sending notification:", err.message);
  }
}

// Cronjob ch·∫°y m·ªói ph√∫t
cron.schedule("* * * * *", async () => {
  try {
    const now = dayjs();

    // ch·ªâ l·∫•y s·ª± ki·ªán ch∆∞a k·∫øt th√∫c/h·ªßy
    const events = await Event.find({
      status: { $in: ["upcoming", "ongoing"] },
    });

    for (const ev of events) {
      const start = dayjs(ev.startAt);
      const end = dayjs(ev.endAt);

      // 15 ph√∫t tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu
      if (
        ev.status === "upcoming" &&
        !ev.notified15mBefore &&
        now.isSame(start.subtract(2, "minute"), "minute")
      ) {
        await sendNotification({
          title: `S·∫Øp di·ªÖn ra: ${ev.title}`,
          content: `S·ª± ki·ªán ${ev.title} s·∫Ω b·∫Øt ƒë·∫ßu l√∫c ${start.format("HH:mm DD/MM/YYYY")}`,
          eventId: ev._id,
        });
        ev.notified15mBefore = true;
        await ev.save();
      }

      // B·∫Øt ƒë·∫ßu s·ª± ki·ªán
      if (
        ev.status === "upcoming" &&
        !ev.notifiedStart &&
        now.isSame(start, "minute")
      ) {
        await sendNotification({
          title: `B·∫Øt ƒë·∫ßu s·ª± ki·ªán: ${ev.title}`,
          content: `S·ª± ki·ªán ${ev.title} ƒë√£ b·∫Øt ƒë·∫ßu!`,
          eventId: ev._id,
        });
        ev.status = "ongoing";
        ev.notifiedStart = true;
        await ev.save();
      }

      // K·∫øt th√∫c s·ª± ki·ªán
      if (
        ev.status === "ongoing" &&
        !ev.notifiedEnd &&
        now.isSame(end, "minute")
      ) {
        await sendNotification({
          title: `K·∫øt th√∫c s·ª± ki·ªán: ${ev.title}`,
          content: `S·ª± ki·ªán ${ev.title} ƒë√£ k·∫øt th√∫c.`,
          eventId: ev._id,
        });
        ev.status = "finished";
        ev.notifiedEnd = true;
        await ev.save();
      }
    }
  } catch (err) {
    console.error("‚ùå Cronjob error:", err.message);
  }
});
